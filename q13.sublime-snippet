<snippet>
    <content><![CDATA[
const ${2:${1/(.+)/\u$1/g}} = require('../models/${1:${TM_FILENAME/\..*/$1/}}.model');
const Seq = require('../models/seq.model')
const { responseOk, responseError } = require('../helpers/paginate.helper');
const { searchingQueries, pagingOptions } = require('../helpers/paginate.helper');
// const moment = require('moment');

// const Excel = require('exceljs');
// const dirExport = './public/exports/results/';
// const pathRedirect = '/exports/results/';

module.exports.getList = (req, res) => {
    let add = {};
    let remove = {};

    // if (status == 'all')
    //     add.status = { $in: ['WIN', 'LOSE'] };
    // else if (status == 'WIN')
    //     add.status = 'WIN';
    // else if (status == 'LOSE')
    //     add.status = 'LOSE';
    // else
    //     return responseError(res, 404, 'STATUS_NOT_FOUND');


    return $2.paginate(searchingQueries(req, [], { add, remove }),
        pagingOptions(req))
        .then(results => {
            responseOk(res, results);
        })
        .catch(error => {
            console.log(error.message);
            responseError(res, 500, error.message);
        });
}

module.exports.getDetail = async (req, res) => {
    const { $1_id } = req.params;
    return $2.findOne({$1_id})
        .then(item => {
            if (!item)
                return responseError(res, 404, '${3:${1/(.)/\u$1/g}}_NOT_FOUND');
            responseOk(res, item);
        })
        .catch(error => {
            console.log(error.message);
            responseError(res, 500, error.message);
        });
}

module.exports.create = async (req, res) => {
    $2.init().then(async () => {

        let { body } = req;
        let ${1}_id = 1;
        const seq = await Seq.findOne({ 'seq_id':1 }).select('${1}');
        if(!seq){
            const s = new Seq({'seq_id':1});
            s.save();
        }else{
            ${1}_id = ++seq['${1}'];
        }

        const collection = new $2({
            ...body,
            $1_id,
            // start_date: moment(body.start_date)
        });

        const err = collection.validateSync();
        if (!err) {
            collection.save().then(data => {
                data = data.toJSON({
                    list: true
                });
                Seq.findOneAndUpdate({ 'seq_id':1 }, {'${1}':${1}_id}).exec();
                responseOk(res, data);
            }).catch(err => {
                responseError(
                    res,
                    err.message.indexOf('duplicate key error') !== -1
                        ? 409
                        : 500,
                    err.message
                );
            });
        } else {
            responseError(res, 422, err.message);
        }
    })
        .catch(error => {
            console.log(error.message);
            responseError(res, 500, error.message);
        })
}

module.exports.edit = (req, res) => {
    $2.init().then(async () => {
        let { body } = req;

        if (body.$1_id)
            delete body.$1_id;

        // if (body.start_date) {
        //     if (moment() > moment(body.start_date))
        //         return responseError(res, 409, 'START_DATE_INVALID');
        //     else
        //         body.start_date = moment(body.start_date);
        // }

        const $1 = await $2.findOne({ $1_id: req.params.$1_id });

        // if ($1.status != 'PENDING')
        //     return responseError(res, 700, 'GAME_STATUS_MUST_BE_PENDING');

        $2.findOneAndUpdate(
            { $1_id: req.params.$1_id },
            body,
            {
                new: true
            }).then(data => {
                if (!data) {
                    responseError(res, 404);
                } else {

                    data = data.toJSON({
                        list: true
                    });
                    responseOk(res, data);
                }
            });
    }).catch(err => {
        responseError(res, 500, err.message);
    });

}

module.exports.remove = (req, res) => {
    return $2.init().then(async () => {
        const { $1_id } = req.params;

        const $1 = await $2.findOne({ $1_id });
        if (!$1)
            return responseError(res, 404, '$3_NOT_FOUND');

        // await Result.deleteMany({ banner_id });
        await $2.deleteOne({ $1_id });
        responseOk(res, { success: true, message: 'ok' });

    })
        .catch(error => responseError(res, 500, error.message));
}
]]></content>
    <tabTrigger>q13</tabTrigger>
    <scope>source.js</scope>
    <description>Backend: controllers/xxx.controller.js</description>
</snippet>