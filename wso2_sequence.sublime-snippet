<snippet>
    <content><![CDATA[
//${1:${1/(.+)\..+|.*/$1/}}
import Immutable,{Map,List} from 'immutable'
import _ from 'lodash'
import {ACTION_BASIC} from '../../common/constant' 
let {
  REDUX_UPDATE_${2:${1/(.)/\u$1/g}},
  REDUX_REMOVE_$2
} = ACTION_BASIC

const initState = Immutable.fromJS({byId:{},ids:[],time:new Date().getTime()});

const $1 = (state = initState, action) => {
  let {type,payload} = action
  switch (type) {
    case REDUX_UPDATE_$2:
      return Array.isArray(payload)?
        state.update('byId',value=>value.merge(Map(payload.reduce((obj,item)=>Object.assign(obj,{[item.id]:item}),{}))))
          .update('ids',l=>List(_.union([...l,...payload.map(p=>p.id)])))
          .set('time',new Date().getTime())
        :
        state.update('byId',m=>m.set(payload.id,Immutable.fromJS(payload)))
          .update('ids',l=>List(_.union([...l,payload.id])))
          .set('time',new Date().getTime())
    case REDUX_REMOVE_$2:
      return Array.isArray(payload) ? 
        state.update('byId',m=>m.deleteAll(payload))
          .update('ids',l=>l.filter(i=>_.indexOf(payload,i)!==-1))
          .set('time',new Date().getTime())
        :
        state.deleteIn(['byId',payload])
          .update('ids',l=>l.filter(i=>i!==payload))
          .set('time',new Date().getTime())
    default:
      return state;
  }
}
export default $1;
]]></content>
    <tabTrigger>w1</tabTrigger>
    <scope>text.xml</scope>
    <description>Atum: Make reducer class</description>
</snippet>